openapi: 3.0.0
info:
  title: Application API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.0.1

paths:
  ######################
  ######   AUTH   ######
  ######################

  /auth/salt/{username}:
    get:
      operationId: Auth.service.salt
      tags: [Auth, GET]
      summary: Authorizes users
      parameters:
              - in: path
                name: username
                schema:
                  type: string
                required: true
      responses:
        200:
          description: Salt retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaltResponse'
        422:
          description: User not found!

  /auth/register:
    post:
      operationId: Auth.service.register
      tags: [Auth, POST]
      summary: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
      responses:
        200:
          description: Account created
        400:
          description: Username or e-mail taken
        500:
          description: Database error

  /auth/login:
    post:
      operationId: Auth.service.login
      tags: [Auth, POST]
      summary: Logs in a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
        401:
          description: Login unsuccessful

  /auth/logout:
    get:
      operationId: Auth.service.logout
      tags: [Auth, GET]
      summary: Logs current user out
      responses:
        200:
          description: Logout successful
        500:
          description: Server error


  ######################
  #####   Profile  #####
  ######################

  /profile:
    get:
      operationId: Profile.service.getMyProfile
      tags: [Data, GET]
      summary: Returns profile info
      responses:
        200:
          description: Profile retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        500:
          description: Database error!

    put:
      operationId: Profile.service.updateProfile
      tags: [UPDATE, PUT]
      summary: Updates profile info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      responses:
        200:
          description: Profile Updated.
        500:
          description: Database error!

  /profile/{username}:
    get:
      operationId: Profile.service.getProfile
      tags: [Auth, GET]
      summary: Gets profile info
      parameters:
              - in: path
                name: username
                schema:
                  type: string
                required: true
      responses:
        200:
          description: Profile retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        422:
          description: User not found!


  ######################
  #####   Secrets  #####
  ######################


  /secret:
    post:
      operationId: Secrets.service.createSecret
      tags: [Secret, POST]
      summary: Creates secret.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
      responses:
        201:
          description: Secret Created.
        422:
          description: Secret Exists!
        500:
          description: Database error!
    get:
      operationId: Secrets.service.getSecrets
      tags: [Secret, GET]
      summary: Obtains secrets.
      responses:
        200:
          description: Secret found.
        500:
          description: Database error!


  /secret/{protocolId}:
    get:
      operationId: Secrets.service.getSecret
      tags: [Secret, GET]
      summary: Obtains secret.
      parameters:
        - in: path
          name: protocolId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Secret found.
        422:
          description: Secret not found!
        500:
          description: Database error!


  ######################
  #####   PAIRS    #####
  ######################

  /pair/result:
    get:
      operationId: Result.service.getMatchedPairs
      tags: [PAIRS, GET]
      summary: Obtains Matched Pairs.
      responses:
        200:
          description: Pairs retrieved.
        500:
          description: Database error!


  /pair/new:
    get:
      operationId: Result.service.getUnmatchedPairs
      tags: [PAIRS, GET]
      summary: Obtains Unmatched Pairs.
      responses:
        200:
          description: Pairs retrieved.
        500:
          description: Database error!

  ######################
  #####   PROTOCOL  #####
  ######################

  /protocol:
    get:
      operationId: Protocol.service.getActiveProtocolsForUser
      tags: [PROTOCOLS, GET]
      summary: Obtains active protocol list.
      responses:
        200:
          description: Protocols retrieved.
        500:
          description: Database error!

  /protocol/{protocolID}:
    get:
      operationId: Protocol.service.getProtocolDataById
      tags: [PROTOCOLS, GET]
      summary: Obtains active protocol list.
      parameters:
        - in: path
          name: protocolID
          schema:
            type: string
          required: true
      responses:
        200:
          description: Protocols retrieved.
        401:
          description: Unauthorized!
        500:
          description: Database error!

  /protocol/name/{name}:
    get:
      operationId: Protocol.service.getProtocolDataByName
      tags: [PROTOCOLS, GET]
      summary: Obtains active protocol for name.
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        200:
          description: Protocols retrieved.
        401:
          description: Unauthorized!
        500:
          description: Database error!

  /protocol/step1:
    post:
      operationId: Protocol.service.initProtocol
      tags: [PROTOCOLS, POST]
      summary: First round!
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/initProtocol'
      responses:
        201:
          description: Protocols created.
        401:
          description: Unauthorized!
        422:
          description: Protocol Existis!
        500:
          description: Database error!

  /protocol/step2:
    post:
      operationId: Protocol.service.respondProtocol
      tags: [PROTOCOLS, POST]
      summary: Second round!
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/respondProtocol'
      responses:
        201:
          description: Protocols created.
        401:
          description: Unauthorized!
        500:
          description: Database error!

  /protocol/step3:
    post:
      operationId: Protocol.service.thirdRoundProtocol
      tags: [PROTOCOL, POST]
      summary: Third round!
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/thirdProto'
      responses:
        204:
          description: Protocols Updated.
        401:
          description: Unauthorized!
        500:
          description: Database error!

  /protocol/step4:
    post:
      operationId: Protocol.service.fourthRoundProtocol
      tags: [PROTOCOL, POST]
      summary: Fourth round!
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fourthProro'
      responses:
        204:
          description: Protocols Updated.
        401:
          description: Unauthorized!
        500:
          description: Database error!

components:
  schemas:
    ### Authetication

    SaltRequest:
      type: object
      properties:
        username:
          type: string
      required: [username]


    SaltResponse:
      type: object
      properties:
        salt:
          type: string

    RegistrationRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        salt:
          type: string
      required: [username, password, firstName, lastName, salt]

    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required: [username, password]

    ProfileResponse:
          type: object
          properties:
            username:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            age:
              type: integer
            bio:
              type: string
            imageUrl:
              type: string
            phone:
              type: string
            token:
              type: string

    ProfileUpdate:
          type: object
          properties:
            age:
              type: string
            bio:
              type: string
            imageUrl:
              type: string
            phone:
              type: string
    Secret:
      type: object
      properties:
        username:
          type: string
        protocolId:
          type: string
        data:
          type: string
      required: [username, protocolId, data]

    SecretRequest:
      type: object
      properties:
        protocolId:
          type: string
      required: [protocolId]

    initProtocol:
      type: object
      properties:
        iniciator:
          type: string
        responder:
          type: string
        encryptions:
          type: array
        iniciatorChoice:
          type: string
        iniciatorLabels:
          type: array
        pubKey:
          type: string
        iniciatorMessages:
          type: array
      required: [iniciator, responder, encryptions, iniciatorChoice, iniciatorLabels, pubKey, iniciatorMessages]

    respondProtocol:
      type: object
      properties:
        responder:
          type: string
        protocolID:
          type: string
        v:
          type: string
      required: [responder, protocolID, v]

    thirdProto:
      type: object
      properties:
        iniciator:
          type: string
        protocolID:
          type: string
        iniciatorChecks:
          type: string
      required: [iniciator, protocolID, iniciatorChecks]

    fourthProro:
      type: object
      properties:
        responder:
          type: string
        protocolID:
          type: string
        responderLabels:
          type: array
      required: [responder, protocolID, responderLabels]


#   /auth/isLogged:
#     get:
#       operationId: endpoints.authentication.isLogged
#       tags: [Auth, GET]
#       summary: Says if user is logged in or not
#       responses:
#         200:
#           description: User logged in
#         401:
#           description: User not logged in
#

#   /measurements:
#     post:
#       operationId: endpoints.application.addMeasurements
#       tags: [Measurements, POST]
#       summary: Add measurement data
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/MeasurementPostRequest'
#       responses:
#         200:
#           description: Operation successful
#         500:
#           description: Database error
#     get:
#       operationId: endpoints.application.getMeasurements
#       tags: [Measurements, GET]
#       summary: Get measurement data
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/MeasurementGetRequest'
#       responses:
#         200:
#           description: Doctors retrieved
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/MeasurementGetResponse'
#         500:
#           description: Internal error
#
#   /doctors:
#     put:
#       operationId: endpoints.application.updateDoctors
#       tags: [Doctors, PUT]
#       summary: Update doctors list
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/DoctorPutRequest'
#       responses:
#         200:
#           description: OK
#         500:
#           description: not OK  #TODO: expand ; Return list in positive response
#     get:
#       operationId: endpoints.application.getDoctors
#       tags: [Doctors, GET]
#       summary: Get measurement data
#       responses:
#         200:
#           description: Measurements retrieved
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/DoctorGetResponse'
#
#   /notifications:
#     get:
#       operationId: endpoints.application.getNotifications
#       tags: [Notifications, GET]
#       summary: Get notifications
#       responses:
#         200:
#           description: Notifications retrieved
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/NotificationGetResponse'
#         #TODO: add more
#
# components:
#   schemas:
#     ### Authetication
#     RegistrationRequest:
#       type: object
#       properties:
#         email:
#           type: string
#         password:
#           type: string
#         username:
#           type: string
#         role:
#           type: string
#           enum: [doctor, patient]
#       required: [email, password, username, role]
#
#     LoginRequest:
#       type: object
#       properties:
#         username:
#           type: string
#         password:
#           type: string
#       required: [username, password]
#
#     MeasurementPostRequest:
#       type: object
#       properties:
#         measurements:
#           type: array
#           items:
#             $ref: '#/components/schemas/MeasurementObject'
#       required: [measurements]
#
#     MeasurementGetRequest:
#       type: object
#       properties:
#         start:
#           type: integer
#         end:
#           type: integer
#       required: [start, end]
#
    # MeasurementGetResponse:
    #   type: object
    #   properties:
    #     measurements:
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/MeasurementObject'
#
#     DoctorPutRequest:
#       type: array
#       items:
#         $ref: '#/components/schemas/DoctorObject'
#
#     DoctorGetResponse:
#       type: array
#       items:
#         $ref: '#/components/schemas/DoctorObject'
#
#     NotificationGetResponse: #TODO: expand
#       type: array
#       items:
#         type: string
#
#     DoctorObject:
#       type: string
#
#     MeasurementObject:
#       type: object
#       properties:
#         bpm:
#           type: integer
#         timestamp:
#           type: integer
#
#
#
#
#
#
#
#
#
#
#
